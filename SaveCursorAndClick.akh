#Requires AutoHotkey v2.0

global hotkeyMap := Map()  ; key -> { x, y, block, moveOnly }

; --- F9: Capture + Click, allow through ---
F9::captureHotkey(false, false)

; --- Shift+F9: Capture + Click, block key ---
+F9::captureHotkey(true, false)

; --- Ctrl+F9: Capture + Move only, allow through, print app name ---
^F9::captureHotkey(false, true)

; --- Ctrl+Shift+F9: Clear all hotkeys ---
^+F9:: {
    for key in hotkeyMap {
        Hotkey("*" key, "Off")
    }
    hotkeyMap.Clear()
    MsgBox "All hotkeys cleared."
}

; --- Hotkey Capture Logic ---
captureHotkey(blockKey, moveOnly) {
    MouseGetPos(&x, &y)
    label := moveOnly ? "Move Only" : (blockKey ? "Click + Block" : "Click + Allow")
    ToolTip label ": Press a key to bind..."
    ih := InputHook("L1")
    ih.KeyOpt("{All}", "E")
    ih.Start()
    ih.Wait()
    ToolTip()

    key := ih.EndKey
    if !key {
        MsgBox "No key was pressed."
        return
    }

    if (hotkeyMap.Count >= 4) {
        MsgBox "Only 4 hotkeys supported."
        return
    }

    hotkeyMap[key] := { x: x, y: y, block: blockKey, moveOnly: moveOnly }

    flags := blockKey ? "UseHook" : ""
    HotIf (*) => true
    Hotkey("*" key, (*) => handleHotkey(key), flags)

    MsgBox "Assigned key '" key "' to " (moveOnly ? "move mouse only" : "click") " at (" x ", " y ")" (blockKey ? " [Blocked]" : "")
}

; --- Hotkey Handler ---
handleHotkey(key) {
    if !hotkeyMap.Has(key)
        return

    MouseGetPos(&origX, &origY)
    pos := hotkeyMap[key]

    MouseMove(pos.x, pos.y, 0)

    if !pos.moveOnly {
        Click
        MouseMove(origX, origY, 0)
    } else {
        ; Show the active window for context
        WinGetTitle(&title, "A")
        WinGetClass(&cls, "A")
        ToolTip "Moved mouse only. Active Window:`nTitle: " title "`nClass: " cls
        SetTimer () => ToolTip(), -2000
    }
}
